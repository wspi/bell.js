# bell.js configuration. https://github.com/eleme/bell.js

# =============================== Global ======================================

# interval      integer, seconds step for all metrics. default: 10 (10s)
interval = 10
logPath = "/var/log/bell/"

# =============================== Job Queue ===================================

[beanstalkd]
host = "0.0.0.0"    # beanstalkd host to connect, default: "0.0.0.0"
port = 11300        # beanstalkd port to connect, default: 11300
tube = "bell"       # beanstalkd tube to use, default: "bell"


# =============================== Storage =====================================

[ssdb]
host = "0.0.0.0"   # ssdb host to connect, default: "0.0.0.0"
port = 8888        # ssdb port to connect, default: 8888
size = 6           # ssdb connection pool size, default: 6
auth = ""          # ssdb auth string, default: "" (empty for no auth)
prefix = "bell."   # the prefix for bell to name zset, hash.., default: "bell."

  [ssdb.zset]
  # ssdb.zset.expire        integer, seconds to expire a datapoint (for all
  #                         metrics), default: 432000 (5 days)
  expire = 432000


# =============================== Listener ====================================

[listener]
host = "0.0.0.0"            # listener host to bind, default: "0.0.0.0"
port = 8889                 # listener (tcp) port to listen, default: 8889

# listener.blacklist        array, listener will disallow metrics which match
#                           blacklist pattern(s), default: ["statsd.*"]
blacklist = ["statsd.*"]

# listener.patterns         array, listener will allow metrics which match these
#                           pattern(s), except those hit blacklist, default:
#                           ["timer.mean_90.*", "timer.count_ps.*", "counter.*"]
patterns = [
  "timer.mean_90.*",
  "timer.count_ps.*",
  "counter.*"
]


# =============================== Analyzer ====================================

[analyzer]
# analyzer.workers      integer, analyzer workers (processes) number, default: 24
workers = 4

# analyzer.strict       boolean, whether burr points should be considered to be
#                       anomaous, default: true
strict = true

# analyzer.minSize      integer, analyzers start to work if series size is bigger
#                       than this value, default: 50
minSize = 50

  [analyzer.filter]
  # analyzer.filter.offset        float, analyzers filter history datapoints within
  #                               some offset, which is calculated by the folloing
  #                               method:
  #
  #                                 current - history < abs(offset * periodicity)
  #
  #                               default: 0.01
  offset = 0.01
  # analyzer.filter.periodicity   integer, metrics periodicity (in seconds), default:
  #                               86400 (1 day)
  periodicity = 86400

  [analyzer.trending]
  # analyzer.trending.factor      float, the factor to calculate trending value via
  #                               weighted moving average algorithm, default: 0.1
  factor = 0.1


# =============================== WebApp ======================================

[webapp]
# webapp.workers      integer, webapp workers (processes) number, default: 5
workers = 2

port = 8989           # tcp port for webapp to bind

# webapp.root         string, if your webapp is going to be served in sub-directory,
#                     like 'http://mydomain.com/sub_dir', set this to "sub_dir",
#                     default: "" (root directory)
root = ""

# webapp.groups       string, a js file which only contains an object, checkout
#                     config/groups.js for example.
groups = ""


# =============================== Cleaner ===================================

[cleaner]
# cleaner.interval      integer, seconds interval to clean dead metrics,
#                       default: 600 (1min)
interval = 600

# cleaner.threshold     integer, if the age of a metric hitting bell exceeds this
#                       threshold, it will be cleaned, default: 172800 (2 day)
threshold = 172800


# =============================== Alerter ===================================

[alerter]
host = "0.0.0.0"        # alerter host to bind
port = 8789             # alerter port to listen (tcp)

# alerter.modules       array, the alerter modules list, each alerter module
#                       should be a node module.
modules = ["../alerters/console"]
